#Data Model
The whole dataset is a collection of items. The impact of item sizes are
ignored(or equavalently item sizes are treated as fixed). The dataset is then
partitioned into groups. Each group size can be specified by user.

#System Model
A system consists several zones. The whole data set is replicaed among all
zones . Each zone has several servers to handle transactions.  There is one
client service running at the front end of each zone.  Transactions are queued
up at the client service side when it is not served(e.g. no avaialbe server to
handle it or waiting for the next epoch).

Each zone server hosts several groups of the dataset. No group is served by two
servers within one zone. The servers not only handles transactions, but also
serve data item read and write requests.  Transactions are assigned to the
servers. Some locality policy might be used to assign servers.

To ensure consistency, servers participant some protocol to complete a
transaction. Each group on the server has its own lock table to maintain
consistency.

#Transaction Model
Each transaction goes through a seriers of steps: prepare, start, read, write,
commit, abort and cleanup. Prepare step occurs when the transaction arrives at
the system; and the system prepares the transaction to run. The transaction
actually runs by first go through the start step. It then read and write as it
is configured. After any step of its execution, it could be aborted by some
reason. Once abort, the transaction restart from the start step. If after all
the read/write step is finished and it is not aborted, it will try to go
through the commit step. If this succeeds, it will go to the cleanup step so
that the server handling the transaction is freed.

#Simulation
The simulator is transaction-orientated. That is, for each transaction, we
create a process to simulate its steps. The process does not belong to any
zone or server object but only changes their states to simulate the
assignment.

Different implementations will have different control flow for each step, e.g.,
2pc contacts invoke several rounds of communication among zone while
tide does not have such events. In our simulator, specific implementations
override the corresponding step function call.

##Details
###Prepare step
When a transaction arrives, it is enqueued in the zone's client waiting
queue. Then it is assigned to one of the server.

